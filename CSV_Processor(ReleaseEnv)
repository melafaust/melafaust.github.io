<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ADF Pipeline Report Bot</title>
  https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5e.min.js
  <style>
    body {
      background-color: #f8f9fa;
    }
    .container {
      max-width: 700px;
      margin-top: 60px;
    }
    .card {
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    pre {
      background: #f1f1f1;
      padding: 15px;
      border-radius: 8px;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
<div class="container">
  <div class="card">
    <h3 class="text-center mb-4">📊 ADF Pipeline Report Bot</h3>
    <div class="mb-3">
      <label for="csvFile" class="form-label">Upload your CSV file</label>
      <input class="form-control" type="file" id="csvFile" accept=".csv" />
    </div>
    <div class="d-grid mb-3">
      <button class="btn btn-primary" onclick="processCSV()">🚀 Generate Report</button>
    </div>
    <div id="reportSection" style="display:none;">
      <h5>📋 Preview Report</h5>
      <pre id="reportOutput"></pre>
      <div class="d-grid">
        <button class="btn btn-success" onclick="sendToTeams()">📤 Send to Teams</button>
      </div>
    </div>
    <div id="statusMessage" class="mt-3"></div>
  </div>
</div>

<script>
  let reportMessage = "";
  const webhookUrl = "https://accenture.webhook.office.com/webhookb2/7185bf44-2c01-4a5a-bd71-01a9cda30171@e0793d39-0939-496d-b129-198edd916feb/IncomingWebhook/64d28fcae0144366ae69f59b01705d4d/6e8ac95c-6694-4b54-8419-8942f9395f3a/V2tYYhFkrIWEzLMJEIuYEdDuAUWdB1E3H8lMnSoSnjOVU1";

  function processCSV() {
    const fileInput = document.getElementById("csvFile");
    const file = fileInput.files[0];
    if (!file) {
      alert("Please upload a CSV file.");
      return;
    }

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: function(results) {
        const data = results.data;
        const failed = data.filter(row => row["Status"] === "Failed");
        if (failed.length === 0) {
          reportMessage = "**📅 Failed Pipelines Report – No failed pipelines found.**";
          showReport();
          return;
        }

        const grouped = {};
        failed.forEach(row => {
          const date = new Date(row["Run start"]);
          if (!isNaN(date)) {
            const key = date.toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' });
            if (!grouped[key]) grouped[key] = [];
            grouped[key].push(row);
          }
        });

        let message = "🌞 Hi Team, Good Morning!\n\n\n";
        for (const [date, rows] of Object.entries(grouped)) {
          message += `**📅 Failed Pipelines Report – ${date}**\n\n\`\`\`\n`;

          const dimFact = rows.filter(r => r["Pipeline name"]?.includes("Transform_DimFact"));
          if (dimFact.length === 0) {
            message += "❌ No Transform_DimFact failures found for this date.\n\n";
          } else {
            dimFact.forEach(r => {
              const error = r["Error"] || "";
              const brief = error.split(":")[0] || error;
              const codeMatch = error.match(/ErrorCode=([A-Za-z0-9]+)/);
              const code = codeMatch ? `ErrorCode=${codeMatch[1]}` : "";
              message += `❌ ${r["Pipeline name"]}\n     ⚠️ Error: ${brief}\n`;
              if (code) message += `          🧾 ${code}\n`;
              message += "\n";
            });
          }

          const inner = rows.filter(r => r["Pipeline name"]?.includes("_inner"));
          if (inner.length > 0) {
            const counts = {};
            inner.forEach(r => {
              const name = r["Pipeline name"];
              counts[name] = (counts[name] || 0) + 1;
            });
            message += "Pipeline Name".padEnd(50) + "Failed Count\n";
            message += "-".repeat(65) + "\n";
            for (const [name, count] of Object.entries(counts)) {
              message += `${name.padEnd(50)}= ${count}\n`;
            }
          }

          message += "```````\n\n";
        }

        reportMessage = message;
        showReport();
      }
    });
  }

  function showReport() {
    document.getElementById("reportOutput").textContent = reportMessage;
    document.getElementById("reportSection").style.display = "block";
    document.getElementById("statusMessage").innerHTML = "";
  }

  function sendToTeams() {
    fetch(webhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text: reportMessage })
    })
    .then(res => {
      if (res.ok) {
        document.getElementById("statusMessage").innerHTML = `<div class="alert alert-success">✅ Report sent to Teams!</div>`;
      } else {
        document.getElementById("statusMessage").innerHTML = `<div class="alert alert-danger">❌ Failed to send. Status: ${res.status}</div>`;
      }
    })
    .catch(err => {
      document.getElementById("statusMessage").innerHTML = `<div class="alert alert-danger">❌ Error: ${err.message}</div>`;
    });
  }
</script>
</body>
</html>
